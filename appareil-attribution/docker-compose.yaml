# docker-compose.yml — PostgreSQL (1 primary + 2 standbys) + Pgpool-II
#                       MariaDB-Galera (3 nœuds) + Prometheus / Grafana
# Docker Compose V2  ─ aucune clé “version” requise

##############################
# Réseaux & volumes globaux  #
##############################

networks:
  dbnet:

volumes:
  pg_primary_data:
  pg_standby1_data:
  pg_standby2_data:
  pgpool_config:
  galera1_data:
  galera2_data:
  galera3_data:
  prometheus_data:
  grafana_data:

##############################
# Services                   #
##############################

services:
  # ──────────────────────────
  # PostgreSQL — primary
  # ──────────────────────────
  postgres_primary:
    image: bitnami/postgresql:16
    container_name: postgres_primary
    restart: unless-stopped
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgrespass
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl_pass
      POSTGRESQL_SYNCHRONOUS_COMMIT_MODE: on
      POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS: 2
    volumes:
      - pg_primary_data:/bitnami/postgresql
    networks:
      - dbnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ──────────────────────────
  # PostgreSQL — standbys
  # ──────────────────────────
  postgres_standby1:
    image: bitnami/postgresql:16
    container_name: postgres_standby1
    restart: unless-stopped
    depends_on:
      - postgres_primary
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgrespass
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_MASTER_HOST: postgres_primary
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl_pass
    volumes:
      - pg_standby1_data:/bitnami/postgresql
    networks:
      - dbnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_standby2:
    image: bitnami/postgresql:16
    container_name: postgres_standby2
    restart: unless-stopped
    depends_on:
      - postgres_primary
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgrespass
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_MASTER_HOST: postgres_primary
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl_pass
    volumes:
      - pg_standby2_data:/bitnami/postgresql
    networks:
      - dbnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ──────────────────────────
  # Pgpool-II (proxy PostgreSQL)
  # ──────────────────────────
  pgpool:
    image: bitnami/pgpool:latest
    container_name: pgpool
    restart: unless-stopped
    depends_on:
      - postgres_primary
      - postgres_standby1
      - postgres_standby2
    environment:
      PGPOOL_BACKEND_NODES: 0:postgres_primary:5432,1:postgres_standby1:5432,2:postgres_standby2:5432
      PGPOOL_POSTGRES_USERNAME: postgres
      PGPOOL_POSTGRES_PASSWORD: postgrespass
      PGPOOL_SR_CHECK_USER: repl_user
      PGPOOL_SR_CHECK_PASSWORD: repl_pass
      PGPOOL_ADMIN_USERNAME: pgpool_admin
      PGPOOL_ADMIN_PASSWORD: pgpool_admin_pass
      PGPOOL_ENABLE_LOAD_BALANCING: "yes"
      PGPOOL_ENABLE_FAILOVER: "yes"
      PGPOOL_HEALTH_CHECK_PERIOD: 5
    volumes:
      - pgpool_config:/opt/bitnami/pgpool/conf
    ports:
      - "5433:5432"     # port hôte 5433 → Pgpool 5432
    networks:
      - dbnet
    healthcheck:
      test: ["CMD", "pgpool", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ──────────────────────────
  # MariaDB-Galera (3 nœuds)
  # ──────────────────────────
  # Nœud 1 — BOOTSTRAP
  galera1:
    image: bitnami/mariadb-galera:latest
    container_name: galera1
    restart: unless-stopped
    environment:
      MARIADB_GALERA_CLUSTER_NAME: my_galera
      MARIADB_GALERA_CLUSTER_ADDRESS: gcomm://          # vide = bootstrap
      MARIADB_GALERA_CLUSTER_BOOTSTRAP: "yes"
      MARIADB_GALERA_ENABLE: "true"
      MARIADB_ROOT_PASSWORD: galerapass
      MARIADB_ROOT_HOST: '%'
      MARIADB_GALERA_MARIABACKUP_USER: backup
      MARIADB_GALERA_MARIABACKUP_PASSWORD: backuppass
      MARIADB_GALERA_FORCE_SAFETOBOOTSTRAP: "yes"
    volumes:
      - galera1_data:/bitnami/mariadb
    networks:
      - dbnet
    ports:
      - "3306:3306"     # port hôte 3306 → Galera 3306
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$$MARIADB_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nœud 2
  galera2:
    image: bitnami/mariadb-galera:latest
    container_name: galera2
    restart: unless-stopped
    depends_on:
      - galera1
    environment:
      MARIADB_GALERA_CLUSTER_NAME: my_galera
      MARIADB_GALERA_CLUSTER_ADDRESS: gcomm://galera1,galera2,galera3
      MARIADB_GALERA_ENABLE: "true"
      MARIADB_ROOT_PASSWORD: galerapass
      MARIADB_ROOT_HOST: '%'
      MARIADB_GALERA_MARIABACKUP_USER: backup
      MARIADB_GALERA_MARIABACKUP_PASSWORD: backuppass
    volumes:
      - galera2_data:/bitnami/mariadb
    networks:
      - dbnet
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$$MARIADB_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nœud 3
  galera3:
    image: bitnami/mariadb-galera:latest
    container_name: galera3
    restart: unless-stopped
    depends_on:
      - galera1
    environment:
      MARIADB_GALERA_CLUSTER_NAME: my_galera
      MARIADB_GALERA_CLUSTER_ADDRESS: gcomm://galera1,galera2,galera3
      MARIADB_GALERA_ENABLE: "true"
      MARIADB_ROOT_PASSWORD: galerapass
      MARIADB_ROOT_HOST: '%'
      MARIADB_GALERA_MARIABACKUP_USER: backup
      MARIADB_GALERA_MARIABACKUP_PASSWORD: backuppass
    volumes:
      - galera3_data:/bitnami/mariadb
    networks:
      - dbnet
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$$MARIADB_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ──────────────────────────
  # Adminer (client SQL web)
  # ──────────────────────────
  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - dbnet

  # ──────────────────────────
  # Monitoring
  # ──────────────────────────
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - dbnet

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:postgrespass@pgpool:5432/postgres?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - pgpool
    networks:
      - dbnet

  mysqld_exporter:
    image: quay.io/prometheus/mysqld-exporter:latest
    container_name: mysqld_exporter
    restart: unless-stopped
    environment:
      MYSQLD_EXPORTER_PASSWORD: galerapass         # mot de passe root
    command:
      - "--mysqld.address=galera1:3306"
      - "--mysqld.username=root"
    ports:
      - "9104:9104"
    depends_on:
      - galera1
    networks:
      - dbnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafanapass
    networks:
      - dbnet
